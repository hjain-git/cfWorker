/**
 * Welcome to Cloudflare Workers! This is your first worker.
 *
 * - Run `npm run dev` in your terminal to start a development server
 * - Open a browser tab at http://localhost:8787/ to see your worker in action
 * - Run `npm run deploy` to publish your worker
 *
 * Learn more at https://developers.cloudflare.com/workers/
 */

// export default {
// 	async fetch(request, env, ctx) {
// 		const url = new URL(request.url);
// 		const { pathname } = new URL(url);

// 		const key = url.pathname;
// 		console.log('url - ' + url + '\nkey - ' + key);

// 		const html = `<!DOCTYPE html>
// 		<body>
// 		  <h1>Hello World</h1>
// 		  <p>This markup was generated by a Cloudflare Worker.</p>
// 		</body>`;

// 		return new Response(html, {
// 			headers: {
// 				'content-type': 'text/html;charset=UTF-8',
// 			},
// 		});
// 	},
// };

// API Helper functions for userID,lastlogin and email
async function fetchCloudflareAccessUsers(accountId, authKey, authEmail) {
	const url = `https://api.cloudflare.com/client/v4/accounts/${accountId}/access/users`;

	const headers = {
		'Content-Type': 'application/json',
		'X-Auth-Key': authKey,
		'X-Auth-Email': authEmail,
	};

	try {
		const response = await fetch(url, {
			method: 'GET',
			headers: headers,
		});

		if (response.ok) {
			const data = await response.json();
			return data;
		} else {
			throw new Error(`Failed to fetch Cloudflare Access users. Status code: ${response.status}`);
		}
	} catch (error) {
		return { error: `Error: ${error.message}` };
	}
}

// API Helper functions for country
async function getLastSeenIdentity(accountId, userId, authKey, authEmail) {
	const url = `https://api.cloudflare.com/client/v4/accounts/${accountId}/access/users/${userId}/last_seen_identity`;

	const headers = {
		'Content-Type': 'application/json',
		'X-Auth-Key': authKey,
		'X-Auth-Email': authEmail,
	};

	try {
		const response = await fetch(url, {
			method: 'GET',
			headers: headers,
		});

		if (response.ok) {
			const data = await response.json();
			return data;
		} else {
			throw new Error(`Failed to fetch last seen identity. Status code: ${response.status}`);
		}
	} catch (error) {
		return { error: `Error: ${error.message}` };
	}
}

export default {
	async fetch(request, env, ctx) {
		const { pathname } = new URL(request.url);
		console.log(pathname);

		// Define different handlers based on the requested path
		if (pathname == '/secure') {
			const accountId = env.account_id;
			const authKey = env.auth_key;
			const authEmail = env.auth_email;

			var data = await fetchCloudflareAccessUsers(accountId, authKey, authEmail);
			var userID = data['result'][0]['uid'];
			var lastLogin = data['result'][0]['last_successful_login'];
			var email = data['result'][0]['email'];

			var result = await getLastSeenIdentity(accountId, userID, authKey, authEmail);

			var country = result['result']['geo']['country'];
			var contentToBeAdded =
				email + ' authenticated at ' + lastLogin + ' from <a href="/secure/' + country.toLowerCase() + '">' + country + '</a>';

			var htmlContent =
				`
			<!DOCTYPE html>
				<html lang="en">
				<head>
					<meta charset="UTF-8">
					<meta name="viewport" content="width=device-width, initial-scale=1.0">
					<title>Last Authenticated User details</title>
				</head>
				<body>
					<h1>` +
				contentToBeAdded +
				`</h1>
				</body>
				</html>
			`;

			const response = new Response(htmlContent, {
				headers: {
					'Content-Type': 'text/html',
				},
			});
			return response;
		} else if (pathname.startsWith('/secure/')) {
			var key = pathname.split('/')[2] + '.png';
			console.log(key); // to get the country name
			const object = await env.MY_BUCKET.get(key);
			if (object === null) {
				return new Response('Object Not Found', { status: 404 });
			}

			const headers = new Headers();
			object.writeHttpMetadata(headers);
			headers.set('etag', object.httpEtag);
			headers.set('Content-Type', 'image/png');

			return new Response(object.body, {
				headers,
			});
		} else {
			var firstPageTitle = 'Welcome to Cloudflare Testing';
			var firstPageContent = 'Welcome to Cloudflare Testing!';
			var firstPageHTMLContent =
				`
			<!DOCTYPE html>
			  <html lang="en">
			  <head>
				<meta charset="UTF-8">
				<meta name="viewport" content="width=device-width, initial-scale=1.0">
				<title>` +
				firstPageTitle +
				`</title>
			  </head>
			  <body>
				<h1>` +
				firstPageContent +
				`</h1>
			  </body>
			  </html>
			`;

			const response = new Response(firstPageHTMLContent, {
				headers: {
					'Content-Type': 'text/html',
				},
			});
			return response;
		}
	},
};
